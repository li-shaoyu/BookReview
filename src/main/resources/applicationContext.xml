<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/task
            http://www.springframework.org/schema/task/spring-task.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--1.3 开启SpringMVC注解模式-->
    <context:component-scan base-package="com.imooc"/>
    <mvc:annotation-driven>
        <!-- 设置响应的字符集，解决响应时的中文乱码问题 -->
        <!-- 作用场景： 未使用freemaker的情况下，直接通过响应向客户端输出-->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=utf-8</value>
                        <!-- 1.6 JSON(Jackson)序列化输出配置 -->
                        <!-- 解决JSON字符串输出时中文乱码的问题-->
                        <value>application/json;charset=utf-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- 将css、js排除在外，进而提高springMVC对URL的处理效率-->
    <mvc:default-servlet-handler/>

    <!-- 1.5 配置Freemarker模板引擎 -->
    <!-- Freemarker配置对象，通知springMVC在ftl文件下加载Freemarker脚本 -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <!-- Freemarker脚本存放地址 -->
        <property name="templateLoaderPath" value="/WEB-INF/ftl"/>
        <!-- 针对于Freemarker本身需要配置哪些参数 -->
        <property name="freemarkerSettings">
            <!-- 核心属性： defaultEncoding ， 默认的编码类型 -->
            <!-- 这里的编码设置和请求响应处的utf-8是没有关系的，此处解决的是读取ftl脚本时，脚本内的中文乱码问题-->
            <props>
                <prop key="defaultEncoding">UTF-8</prop>
            </props>
        </property>
    </bean>
    <!-- ViewResolver视图解析器 ， 决定了选择哪种模板引擎来对数据进行解析 -->
    <bean id="ViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <!-- contentType响应类型 -->
        <!-- 使用视图解析器将模板引擎和数据结合，产生新的html片段，向响应输出时设置为utf-8 -->
        <!-- 作用场景： springMVC加载freemaker产生html片段时-->
        <property name="contentType" value="text/html;charset=utf-8"/>
        <!-- 模板引擎拓展名 -->
        <property name="suffix" value=".ftl"/>
    </bean>

    <!-- 2.2 MyBatis与Spring的整合配置 -->
    <!-- druid配置数据源与连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- JDBC驱动指向，MySQL8要加cj -->
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <!-- URL &符号需要转义-->
        <property name="url" value="jdbc:mysql://localhost:3306/imooc_reader?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true"/>
        <!-- 用户名 -->
        <property name="username" value="root"/>
        <!-- 密码 -->
        <property name="password" value="629629"/>
        <!-- 初始化创建数据库连接数 -->
        <property name="initialSize" value="5"/>
        <!-- 最大允许数据库连接 -->
        <property name="maxActive" value="20"/>
    </bean>

    <!-- 2.3 配置SqlSessionFactory -->
    <!-- SqlSessionFactoryBean用于根据配置信息创建SqlSessionFactory,不再需要我们自己编码创建 -->
    <!-- 原生Mybaits与Spring整合 -->
    <!--<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <!-- 4.2 Spring XML更改配置SqlSessionFactory -->
    <bean id="sessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <!-- 设置数据源 指向前面创建的dataSource -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 存储sql语句的XML文件 -->
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
        <!-- 2.5 MyBatis配置文件地址 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!-- 2.4 配置Mapper扫描器 -->
    <!-- spring初始化mybatis的过程中， 区分系统接口和mapper接口 -->
    <!-- 自动生成mapper接口的实现类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定包名 -->
        <property name="basePackage" value="com.imooc.reader.mapper"/>
    </bean>

    <!-- 3.3 声明式事务配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 依赖到之前配置好的数据源 dataSource-->
        <!-- 作用： 控制事务的打开、提交、回滚 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 基于注解的事务配置模式 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置Kaptcha 所生成的图品样式 -->
    <!-- DefaultKaptcha 对象完成验证码的生成 -->
    <bean id="kaptchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <!-- 内嵌一个bean -->
            <bean class="com.google.code.kaptcha.util.Config">
                <!-- constructor-arg： 构造参数-->
                <constructor-arg>
                    <props>
                        <!-- 验证码图片不生成边框 -->
                        <prop key="kaptcha.border">no</prop>
                        <!-- 验证码图片宽度为120像素 -->
                        <prop key="kaptcha.image.width">120</prop>
                        <!-- 验证码图片字体颜色为蓝色 -->
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
                        <!-- 每个字符最大占用40像素 -->
                        <prop key="kaptcha.textproducer.font.size">40</prop>
                        <!-- 验证码包含4个字符 -->
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <!-- 开启Spring Task定时任务的注解模式-->
    <task:annotation-driven/>

    <!-- 激活Spring MVC 文件上传 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

</beans>